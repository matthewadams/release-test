#!/usr/bin/env bash

# This script implements the release branch workflow for docker images built by codefresh.io.
#
# Requirements:
# git
# docker

# TODO: port this from bash to plain ol' sh (regex matching needs to be ported)

usage() {
    cat<<EOF
usage:
if on master  branch: release pre|rc
if on release branch: release major|minor|patch|pre

optional supported environment variables:

variable                  description
--------                  -----------
ORIGIN                    name of git remote, default 'origin'
MASTER                    name of master branch, default 'master'
CODEFRESH_YML             name of codefresh.yml file, default 'codefresh.yml'
DOCKER_BUILD_STEP_NAMES   comma-separated list of build step names, defaults to all build steps in \$CODEFRESH_YML
EOF
}

if [ -n "$TEST" ]; then ECHO=echo; fi
if [ -n "$DBG" ]; then set -x; fi

ORIGIN=${ORIGIN:-origin}
MASTER=${MASTER:-master}

RELEASE_LEVEL="$1"
case "$RELEASE_LEVEL" in
  major|minor|patch|pre|rc)
    # ok
    ;;
  h|he|hel|help)
    usage
    exit 0
    ;;
  *)
    if [ -n "$1" ]; then
      echo "ERROR: specify release level of 'pre', 'patch', 'minor', 'major', or 'rc'" >&2
    fi
    usage
    exit 1
    ;;
esac

echo "INFO: checking required preconditions"

git pull > /dev/null 2>&1

if ! git diff --exit-code --no-patch > /dev/null 2>&1; then
  echo 'ERROR: you have modified tracked files; only release from clean directories!' >&2
  exit 3
else
  echo 'INFO: no modified tracked files'
fi

if ! git diff --cached --exit-code --no-patch > /dev/null 2>&1; then
  echo 'ERROR: you have cached modified tracked files; only release from clean directories!' >&2
  exit 3
else
  echo 'INFO: no cached modified tracked files'
fi

if [ -n "$(git status -s)" ]; then
  echo 'ERROR: You have unignored untracked files; only release from clean directories!' >&2
  exit 3
else
  echo 'INFO: no unignored untracked files'
fi

BRANCH="$(git status | head -n 1 | awk '{ print $3 }')"
if [[ ! "$BRANCH" =~ ^(master|v[0-9]{1,}\.[0-9]{1,})$ ]]; then # it is not a master or a release branch
  echo 'ERROR: you can only release from the master branch or release branches (vmajor.minor)!' >&2
  exit 3
else
  echo "INFO: on branch $BRANCH, from which releases are allowed"
fi

if ! git diff --exit-code -no-patch $BRANCH $ORIGIN/$BRANCH > /dev/null 2>&1; then
  echo "ERROR: Local branch $BRANCH differs from remote branch $ORIGIN/$BRANCH" >&2
  exit 3
else
  echo "INFO: no differences between local & remote branch $BRANCH"
fi

if [ "$BRANCH" == "$MASTER" ]; then
  case "$RELEASE_LEVEL" in
    pre|rc)
      # ok
      ;;
    *)
      echo "ERROR: only 'pre' or 'rc' releases are permitted from the $MASTER branch." >&2
      exit 6
      ;;
  esac
else # this is a release branch
  case "$RELEASE_LEVEL" in
      rc|patch|minor|major)
        # ok
        ;;
      *)
        echo "ERROR: only 'rc', 'patch', 'minor', or 'major' releases are permitted from a release branch." >&2
        exit 7
        ;;
  esac
fi

echo "INFO: ok to proceed with $RELEASE_LEVEL from branch $BRANCH"

CODEFRESH_YML=${CODEFRESH_YML:-codefresh.yml}

echo "INFO: determining build step names from $CODEFRESH_YML"

if [ -n "$DOCKER_BUILD_STEP_NAMES" ]; then
  DOCKER_BUILD_STEP_NAMES="$(echo -n "$DOCKER_BUILD_STEP_NAMES" | tr "," " ")" # replace commas with spaces
else
  DOCKER_BUILD_STEP_NAMES="$(cat "$CODEFRESH_YML" | docker run --rm -i matthewadams12/ymlx 'Object.keys(this.steps).filter(it => this.steps[`${it}`].type === "build").join(" ")')"
fi
FIRST_DOCKER_BUILD_STEP_NAME="$(echo -n "$DOCKER_BUILD_STEP_NAMES" | awk '{print $1}')"
if [ -z "$FIRST_DOCKER_BUILD_STEP_NAME" ]; then
  echo "ERROR: no Docker build steps found in file $CODEFRESH_YML" >&2
  exit 13
fi

echo "INFO: build step names are $DOCKER_BUILD_STEP_NAMES"
echo "INFO: determining push step names from $CODEFRESH_YML"

if [ -n "$DOCKER_PUSH_STEP_NAMES" ]; then
  DOCKER_PUSH_STEP_NAMES="$(echo -n "$DOCKER_PUSH_STEP_NAMES" | tr "," " ")" # replace commas with spaces
else
  DOCKER_PUSH_STEP_NAMES="$(cat "$CODEFRESH_YML" | docker run --rm -i matthewadams12/ymlx 'Object.keys(this.steps).filter(it => this.steps[`${it}`].type === "push").join(" ")')"
fi

echo "INFO: push step names are $DOCKER_PUSH_STEP_NAMES"
echo "INFO: determining current version from $CODEFRESH_YML"

VERSION="$(cat "$CODEFRESH_YML" | docker run --rm -i matthewadams12/ymlx "this.steps['$FIRST_DOCKER_BUILD_STEP_NAME'].tag")"
if [[ ! "$VERSION" =~ \-(pre|rc)\.[0-9]{1,}$ ]]; then
  echo 'ERROR: repository is in an inconsistent state: version does NOT end in a prerelease suffix!' >&2
  exit 3
fi

echo "INFO: current version is $VERSION"

# usage: setVersion version step [steps...]
setVersion() {
  V=$1
  shift
  STEP_NAMES="$@"
  for step in $STEP_NAMES; do
    CODEFRESH_YML_CONTENT="$(cat "$CODEFRESH_YML")"
    echo -n "$CODEFRESH_YML_CONTENT" \
      | docker run --rm -i matthewadams12/ymlx "it => { it.steps['$step'].tag = '$V'; return it; }" \
      > "$CODEFRESH_YML"
  done
  echo "INFO: set 'tag' attribute in $CODEFRESH_YML steps $@ to $V"
}

# usage: unsetVersion step [steps...]
unsetVersion() {
  STEP_NAMES="$@"
  for step in $STEP_NAMES; do
    CODEFRESH_YML_CONTENT="$(cat "$CODEFRESH_YML")"
    echo -n "$CODEFRESH_YML_CONTENT" \
      | docker run --rm -i matthewadams12/ymlx "it => { delete it.steps['$step'].tag; return it; }" \
      > "$CODEFRESH_YML"
  done
  echo "INFO: removed 'tag' attribute in $CODEFRESH_YML steps $@"
}

# usage: apply message [tag [remote branch]]
apply() {
  git add . > /dev/null 2>&1
  git commit -m "$1" > /dev/null 2>&1
  echo "INFO: committed changes with message: $1"

  MSG="INFO: pushed commits"

  if [ -n "$2" ]; then
    git tag "$2" > /dev/null 2>&1
    echo "INFO: tagged $2"
    MSG="$MSG & tags"
  fi

  SET_UPSTREAM_ARGS=
  if [ -n "$3" ] && [ -n "$4" ]; then
    SET_UPSTREAM_ARGS="-u '$3' '$4'"
    MSG="$MSG & set tracked upstream to $3/$4"
  fi

  if [ -n "$SET_UPSTREAM_ARGS" ]; then
    git push $SET_UPSTREAM_ARGS > /dev/null 2>&1
    git push --tags
  else
    git push --follow-tags > /dev/null 2>&1
  fi

  echo "$MSG"
}

if [ "$BRANCH" == "$MASTER" ]; then # this will be either an rc, resulting in a new release branch, or a pre
  if [[ ! "$VERSION" =~ ^([0-9]{1,})\.([0-9]{1,})\.0\-pre\.([0-9]{1,})$ ]]; then
    echo "ERROR: the version does not match the format of major.minor.0-pre.n required in the $MASTER branch." >&2
    exit 8
  else
    echo "INFO: version $VERSION matches expected format for branch $BRANCH"
  fi

  # create release branch
  MAJOR=${BASH_REMATCH[1]}
  MINOR=${BASH_REMATCH[2]}
  PATCH=0
  PRE=${BASH_REMATCH[3]}

  case "$RELEASE_LEVEL" in
  rc) # then it's time to create a new release branch
      NEW_RELEASE_BRANCH="v$MAJOR.$MINOR"
      git checkout -b $NEW_RELEASE_BRANCH > /dev/null 2>&1

      NEW_RELEASE_BRANCH_VERSION="$MAJOR.$MINOR.0-rc.0"

      setVersion $NEW_RELEASE_BRANCH_VERSION $DOCKER_BUILD_STEP_NAMES $DOCKER_PUSH_STEP_NAMES

      apply "release $NEW_RELEASE_BRANCH_VERSION" $NEW_RELEASE_BRANCH_VERSION $ORIGIN $NEW_RELEASE_BRANCH
      echo "INFO: created release branch $NEW_RELEASE_BRANCH and tagged $NEW_RELEASE_BRANCH_VERSION for release"

      # return to master branch
      git checkout $MASTER > /dev/null 2>&1
      echo "INFO: checked out $MASTER"

      git cherry-pick $NEW_RELEASE_BRANCH > /dev/null 2>&1 # cherry pick from release branch to get release candidate commit in master
      echo "INFO: cherry-picked $NEW_RELEASE_BRANCH rc commit into $MASTER"

      # advance master version
      NEXT_VERSION="$MAJOR.$(($MINOR+1)).0-pre.0"

      setVersion $NEXT_VERSION $DOCKER_BUILD_STEP_NAMES
      unsetVersion $DOCKER_PUSH_STEP_NAMES

      apply "bump to $NEXT_VERSION [skip ci]"

      # return to release branch & prepare for next prerelease
      git checkout $NEW_RELEASE_BRANCH > /dev/null 2>&1
      echo "INFO: checked out $NEW_RELEASE_BRANCH"

      NEXT_RELEASE_BRANCH_VERSION="$MAJOR.$MINOR.0-rc.1"

      setVersion $NEXT_RELEASE_BRANCH_VERSION $DOCKER_BUILD_STEP_NAMES
      unsetVersion $DOCKER_PUSH_STEP_NAMES

      apply "bump to $NEXT_RELEASE_BRANCH_VERSION [skip ci]"

      exit 0
      ;;

  pre)
      setVersion $VERSION $DOCKER_BUILD_STEP_NAMES $DOCKER_PUSH_STEP_NAMES

      apply "release $VERSION" $VERSION

      NEXT_VERSION=$MAJOR.$MINOR.$PATCH-pre.$((PRE+1))

      setVersion $NEXT_VERSION $DOCKER_BUILD_STEP_NAMES
      unsetVersion $DOCKER_PUSH_STEP_NAMES

      apply "bump to $NEXT_VERSION [skip ci]"

      exit 0
      ;;
  esac
fi

# If we get this far, we are releasing something from a release branch.

if [[ ! "$VERSION" =~ ^([0-9]{1,})\.([0-9]{1,})\.([0-9]{1,})\-rc\.([0-9]{1,})$ ]]; then
  echo "ERROR: the version does not match the format of major.minor.patch-rc.n required in the release branch." >&2
  exit 8
else
    echo "INFO: version $VERSION matches expected format for branch $BRANCH"
fi
MAJOR=${BASH_REMATCH[1]}
MINOR=${BASH_REMATCH[2]}
PATCH=${BASH_REMATCH[3]}
PRE=${BASH_REMATCH[4]}

case "$RELEASE_LEVEL" in
  major|minor|patch)

    # NOTE: if RELEASE_LEVEL is 'minor' & we're prepped for a major release, no harm, no foul.
    # A major release is the same as a minor release, only that the minor version is 0.

    if [ $RELEASE_LEVEL == major ] && [ $MINOR != 0 ]; then
      echo "ERROR: this branch is not prepared for a major release because the minor version is $MINOR, not 0." >&2
      exit 10
    else
      NEXT_RELEASE_BRANCH_VERSION="$MAJOR.$MINOR.1-rc.0"
    fi
    if [ $RELEASE_LEVEL == minor ] && [ $PATCH != 0 ]; then
      echo "ERROR: a minor release has already been performed in this release branch; only patch releases are allowed here now." >&2
      exit 11
    else
      NEXT_RELEASE_BRANCH_VERSION="$MAJOR.$MINOR.1-rc.0"
    fi
    if [ $RELEASE_LEVEL == patch ] && [ $PATCH == 0 ]; then
      echo "ERROR: you must release a minor release before releasing a patch in this release branch." >&2
      exit 12
    else
      NEXT_RELEASE_BRANCH_VERSION="$MAJOR.$MINOR.$((PATCH+1))-rc.0"
    fi

    echo "INFO: $RELEASE_LEVEL ok in branch $BRANCH"

    RELEASE_VERSION="$MAJOR.$MINOR.$PATCH"

    setVersion $RELEASE_VERSION $DOCKER_BUILD_STEP_NAMES $DOCKER_PUSH_STEP_NAMES

    apply "release $RELEASE_VERSION" $RELEASE_VERSION

    setVersion $NEXT_RELEASE_BRANCH_VERSION $DOCKER_BUILD_STEP_NAMES
    unsetVersion $DOCKER_PUSH_STEP_NAMES

    apply "bump to $NEXT_RELEASE_BRANCH_VERSION [skip ci]"

    exit 0
    ;;

  rc)
    setVersion $VERSION $DOCKER_BUILD_STEP_NAMES $DOCKER_PUSH_STEP_NAMES

    apply "release $VERSION" $VERSION

    NEXT_RELEASE_BRANCH_VERSION="$MAJOR.$MINOR.$PATCH-rc.$((PRE+1))"

    setVersion $NEXT_RELEASE_BRANCH_VERSION $DOCKER_BUILD_STEP_NAMES
    unsetVersion $DOCKER_PUSH_STEP_NAMES

    apply "bump to $NEXT_RELEASE_BRANCH_VERSION [skip ci]"

    exit 0
    ;;
esac
